// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.2.0.0
//      SpecFlow Generator Version:2.2.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace BullOak.Repositories.Test.Acceptance.Specifications
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.2.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class ReconstituteStateFeature : Xunit.IClassFixture<ReconstituteStateFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "ReconstituteState.feature"
#line hidden
        
        public ReconstituteStateFeature(ReconstituteStateFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "ReconstituteState", "\tIn order to apply business logic on stored entities\r\n\tAs a developer using this " +
                    "library\r\n\tI want to be able to get correctly reconstituted states from my event " +
                    "stream", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.ScenarioTearDown();
        }
        
        [Xunit.FactAttribute(DisplayName="Load stored entity with single event")]
        [Xunit.TraitAttribute("FeatureTitle", "ReconstituteState")]
        [Xunit.TraitAttribute("Description", "Load stored entity with single event")]
        [Xunit.TraitAttribute("Category", "WithNoUpconverters")]
        public virtual void LoadStoredEntityWithSingleEvent()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Load stored entity with single event", new string[] {
                        "WithNoUpconverters"});
#line 7
this.ScenarioSetup(scenarioInfo);
#line 8
 testRunner.Given("an existing stream with 2 events", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 9
 testRunner.When("I load my entity", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 10
 testRunner.Then("HighOrder property should be 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="An event gets upconverted and loaded without upconverter of original event")]
        [Xunit.TraitAttribute("FeatureTitle", "ReconstituteState")]
        [Xunit.TraitAttribute("Description", "An event gets upconverted and loaded without upconverter of original event")]
        [Xunit.TraitAttribute("Category", "WithBuyerNameUpconverter")]
        public virtual void AnEventGetsUpconvertedAndLoadedWithoutUpconverterOfOriginalEvent()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("An event gets upconverted and loaded without upconverter of original event", new string[] {
                        "WithBuyerNameUpconverter"});
#line 14
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title",
                        "Name",
                        "Surname"});
            table1.AddRow(new string[] {
                        "Mr.",
                        "Funny",
                        "Surname"});
#line 15
 testRunner.Given("a buyer name set event which can be upconverted as below in the stream", ((string)(null)), table1, "Given ");
#line 18
 testRunner.When("I load my entity", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 19
 testRunner.Then("FullName property of the entity should be \"Mr. Funny Surname\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="An event gets split upconverted and loaded without upconverter of original event")]
        [Xunit.TraitAttribute("FeatureTitle", "ReconstituteState")]
        [Xunit.TraitAttribute("Description", "An event gets split upconverted and loaded without upconverter of original event")]
        [Xunit.TraitAttribute("Category", "WithBalanceUpdateUpconverter")]
        public virtual void AnEventGetsSplitUpconvertedAndLoadedWithoutUpconverterOfOriginalEvent()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("An event gets split upconverted and loaded without upconverter of original event", new string[] {
                        "WithBalanceUpdateUpconverter"});
#line 23
this.ScenarioSetup(scenarioInfo);
#line 24
 testRunner.Given("a balance set event with balance 50.00 and date 2017-12-30", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 25
 testRunner.When("I load my entity", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 26
 testRunner.Then("the loaded entity should have a balance of 50.00 and last update date 2017-12-30", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.2.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                ReconstituteStateFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                ReconstituteStateFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
